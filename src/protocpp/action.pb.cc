// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: action.proto

#include "action.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
class GMAction_ReleaseSkillDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GMAction_ReleaseSkill>
      _instance;
} _GMAction_ReleaseSkill_default_instance_;
class GMAction_MoveDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GMAction_Move>
      _instance;
} _GMAction_Move_default_instance_;
class GMAction_MoveToPointDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GMAction_MoveToPoint>
      _instance;
} _GMAction_MoveToPoint_default_instance_;
namespace protobuf_action_2eproto {
void InitDefaultsGMAction_ReleaseSkillImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_scene_2eproto::InitDefaultsGMPoint3D();
  {
    void* ptr = &::_GMAction_ReleaseSkill_default_instance_;
    new (ptr) ::GMAction_ReleaseSkill();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GMAction_ReleaseSkill::InitAsDefaultInstance();
}

void InitDefaultsGMAction_ReleaseSkill() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsGMAction_ReleaseSkillImpl);
}

void InitDefaultsGMAction_MoveImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_scene_2eproto::InitDefaultsGMPoint3D();
  {
    void* ptr = &::_GMAction_Move_default_instance_;
    new (ptr) ::GMAction_Move();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GMAction_Move::InitAsDefaultInstance();
}

void InitDefaultsGMAction_Move() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsGMAction_MoveImpl);
}

void InitDefaultsGMAction_MoveToPointImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_scene_2eproto::InitDefaultsGMPoint3D();
  {
    void* ptr = &::_GMAction_MoveToPoint_default_instance_;
    new (ptr) ::GMAction_MoveToPoint();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GMAction_MoveToPoint::InitAsDefaultInstance();
}

void InitDefaultsGMAction_MoveToPoint() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsGMAction_MoveToPointImpl);
}

::google::protobuf::Metadata file_level_metadata[3];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GMAction_ReleaseSkill, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GMAction_ReleaseSkill, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GMAction_ReleaseSkill, roleid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GMAction_ReleaseSkill, skillid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GMAction_ReleaseSkill, mouseposition_),
  1,
  2,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GMAction_Move, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GMAction_Move, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GMAction_Move, roleid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GMAction_Move, draging_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GMAction_Move, direction_),
  1,
  2,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GMAction_MoveToPoint, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GMAction_MoveToPoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GMAction_MoveToPoint, roleid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GMAction_MoveToPoint, position_),
  1,
  0,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::GMAction_ReleaseSkill)},
  { 11, 19, sizeof(::GMAction_Move)},
  { 22, 29, sizeof(::GMAction_MoveToPoint)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::_GMAction_ReleaseSkill_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_GMAction_Move_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_GMAction_MoveToPoint_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "action.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\014action.proto\032\013scene.proto\"[\n\025GMAction_"
      "ReleaseSkill\022\016\n\006roleId\030\001 \002(\005\022\017\n\007skillId\030"
      "\002 \002(\005\022!\n\rmouseposition\030\003 \002(\0132\n.GMPoint3D"
      "\"O\n\rGMAction_Move\022\016\n\006roleId\030\001 \002(\005\022\017\n\007dra"
      "ging\030\002 \002(\010\022\035\n\tdirection\030\003 \002(\0132\n.GMPoint3"
      "D\"D\n\024GMAction_MoveToPoint\022\016\n\006roleId\030\001 \002("
      "\005\022\034\n\010position\030\002 \002(\0132\n.GMPoint3D*>\n\014GMAct"
      "ionType\022\010\n\004MOVE\020\001\022\021\n\rRELEASE_SKILL\020\002\022\021\n\r"
      "MOVE_TO_POINT\020\003"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 335);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "action.proto", &protobuf_RegisterTypes);
  ::protobuf_scene_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_action_2eproto
const ::google::protobuf::EnumDescriptor* GMActionType_descriptor() {
  protobuf_action_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_action_2eproto::file_level_enum_descriptors[0];
}
bool GMActionType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void GMAction_ReleaseSkill::InitAsDefaultInstance() {
  ::_GMAction_ReleaseSkill_default_instance_._instance.get_mutable()->mouseposition_ = const_cast< ::GMPoint3D*>(
      ::GMPoint3D::internal_default_instance());
}
void GMAction_ReleaseSkill::clear_mouseposition() {
  if (mouseposition_ != NULL) mouseposition_->Clear();
  clear_has_mouseposition();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GMAction_ReleaseSkill::kRoleIdFieldNumber;
const int GMAction_ReleaseSkill::kSkillIdFieldNumber;
const int GMAction_ReleaseSkill::kMousepositionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GMAction_ReleaseSkill::GMAction_ReleaseSkill()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_action_2eproto::InitDefaultsGMAction_ReleaseSkill();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:GMAction_ReleaseSkill)
}
GMAction_ReleaseSkill::GMAction_ReleaseSkill(const GMAction_ReleaseSkill& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_mouseposition()) {
    mouseposition_ = new ::GMPoint3D(*from.mouseposition_);
  } else {
    mouseposition_ = NULL;
  }
  ::memcpy(&roleid_, &from.roleid_,
    static_cast<size_t>(reinterpret_cast<char*>(&skillid_) -
    reinterpret_cast<char*>(&roleid_)) + sizeof(skillid_));
  // @@protoc_insertion_point(copy_constructor:GMAction_ReleaseSkill)
}

void GMAction_ReleaseSkill::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&mouseposition_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&skillid_) -
      reinterpret_cast<char*>(&mouseposition_)) + sizeof(skillid_));
}

GMAction_ReleaseSkill::~GMAction_ReleaseSkill() {
  // @@protoc_insertion_point(destructor:GMAction_ReleaseSkill)
  SharedDtor();
}

void GMAction_ReleaseSkill::SharedDtor() {
  if (this != internal_default_instance()) delete mouseposition_;
}

void GMAction_ReleaseSkill::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMAction_ReleaseSkill::descriptor() {
  ::protobuf_action_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_action_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GMAction_ReleaseSkill& GMAction_ReleaseSkill::default_instance() {
  ::protobuf_action_2eproto::InitDefaultsGMAction_ReleaseSkill();
  return *internal_default_instance();
}


void GMAction_ReleaseSkill::Clear() {
// @@protoc_insertion_point(message_clear_start:GMAction_ReleaseSkill)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(mouseposition_ != NULL);
    mouseposition_->Clear();
  }
  if (cached_has_bits & 6u) {
    ::memset(&roleid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&skillid_) -
        reinterpret_cast<char*>(&roleid_)) + sizeof(skillid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GMAction_ReleaseSkill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GMAction_ReleaseSkill)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 roleId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_roleid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roleid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 skillId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_skillid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skillid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .GMPoint3D mouseposition = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_mouseposition()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GMAction_ReleaseSkill)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GMAction_ReleaseSkill)
  return false;
#undef DO_
}

void GMAction_ReleaseSkill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GMAction_ReleaseSkill)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 roleId = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->roleid(), output);
  }

  // required int32 skillId = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->skillid(), output);
  }

  // required .GMPoint3D mouseposition = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *mouseposition_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GMAction_ReleaseSkill)
}

::google::protobuf::uint8* GMAction_ReleaseSkill::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GMAction_ReleaseSkill)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 roleId = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roleid(), target);
  }

  // required int32 skillId = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->skillid(), target);
  }

  // required .GMPoint3D mouseposition = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *mouseposition_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GMAction_ReleaseSkill)
  return target;
}

size_t GMAction_ReleaseSkill::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:GMAction_ReleaseSkill)
  size_t total_size = 0;

  if (has_mouseposition()) {
    // required .GMPoint3D mouseposition = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *mouseposition_);
  }

  if (has_roleid()) {
    // required int32 roleId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->roleid());
  }

  if (has_skillid()) {
    // required int32 skillId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->skillid());
  }

  return total_size;
}
size_t GMAction_ReleaseSkill::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GMAction_ReleaseSkill)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .GMPoint3D mouseposition = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *mouseposition_);

    // required int32 roleId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->roleid());

    // required int32 skillId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->skillid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMAction_ReleaseSkill::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GMAction_ReleaseSkill)
  GOOGLE_DCHECK_NE(&from, this);
  const GMAction_ReleaseSkill* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GMAction_ReleaseSkill>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GMAction_ReleaseSkill)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GMAction_ReleaseSkill)
    MergeFrom(*source);
  }
}

void GMAction_ReleaseSkill::MergeFrom(const GMAction_ReleaseSkill& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GMAction_ReleaseSkill)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_mouseposition()->::GMPoint3D::MergeFrom(from.mouseposition());
    }
    if (cached_has_bits & 0x00000002u) {
      roleid_ = from.roleid_;
    }
    if (cached_has_bits & 0x00000004u) {
      skillid_ = from.skillid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GMAction_ReleaseSkill::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GMAction_ReleaseSkill)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMAction_ReleaseSkill::CopyFrom(const GMAction_ReleaseSkill& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GMAction_ReleaseSkill)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMAction_ReleaseSkill::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void GMAction_ReleaseSkill::Swap(GMAction_ReleaseSkill* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GMAction_ReleaseSkill::InternalSwap(GMAction_ReleaseSkill* other) {
  using std::swap;
  swap(mouseposition_, other->mouseposition_);
  swap(roleid_, other->roleid_);
  swap(skillid_, other->skillid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GMAction_ReleaseSkill::GetMetadata() const {
  protobuf_action_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_action_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GMAction_Move::InitAsDefaultInstance() {
  ::_GMAction_Move_default_instance_._instance.get_mutable()->direction_ = const_cast< ::GMPoint3D*>(
      ::GMPoint3D::internal_default_instance());
}
void GMAction_Move::clear_direction() {
  if (direction_ != NULL) direction_->Clear();
  clear_has_direction();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GMAction_Move::kRoleIdFieldNumber;
const int GMAction_Move::kDragingFieldNumber;
const int GMAction_Move::kDirectionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GMAction_Move::GMAction_Move()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_action_2eproto::InitDefaultsGMAction_Move();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:GMAction_Move)
}
GMAction_Move::GMAction_Move(const GMAction_Move& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_direction()) {
    direction_ = new ::GMPoint3D(*from.direction_);
  } else {
    direction_ = NULL;
  }
  ::memcpy(&roleid_, &from.roleid_,
    static_cast<size_t>(reinterpret_cast<char*>(&draging_) -
    reinterpret_cast<char*>(&roleid_)) + sizeof(draging_));
  // @@protoc_insertion_point(copy_constructor:GMAction_Move)
}

void GMAction_Move::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&direction_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&draging_) -
      reinterpret_cast<char*>(&direction_)) + sizeof(draging_));
}

GMAction_Move::~GMAction_Move() {
  // @@protoc_insertion_point(destructor:GMAction_Move)
  SharedDtor();
}

void GMAction_Move::SharedDtor() {
  if (this != internal_default_instance()) delete direction_;
}

void GMAction_Move::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMAction_Move::descriptor() {
  ::protobuf_action_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_action_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GMAction_Move& GMAction_Move::default_instance() {
  ::protobuf_action_2eproto::InitDefaultsGMAction_Move();
  return *internal_default_instance();
}


void GMAction_Move::Clear() {
// @@protoc_insertion_point(message_clear_start:GMAction_Move)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(direction_ != NULL);
    direction_->Clear();
  }
  if (cached_has_bits & 6u) {
    ::memset(&roleid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&draging_) -
        reinterpret_cast<char*>(&roleid_)) + sizeof(draging_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GMAction_Move::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GMAction_Move)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 roleId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_roleid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roleid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool draging = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_draging();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &draging_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .GMPoint3D direction = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_direction()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GMAction_Move)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GMAction_Move)
  return false;
#undef DO_
}

void GMAction_Move::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GMAction_Move)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 roleId = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->roleid(), output);
  }

  // required bool draging = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->draging(), output);
  }

  // required .GMPoint3D direction = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *direction_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GMAction_Move)
}

::google::protobuf::uint8* GMAction_Move::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GMAction_Move)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 roleId = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roleid(), target);
  }

  // required bool draging = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->draging(), target);
  }

  // required .GMPoint3D direction = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *direction_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GMAction_Move)
  return target;
}

size_t GMAction_Move::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:GMAction_Move)
  size_t total_size = 0;

  if (has_direction()) {
    // required .GMPoint3D direction = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *direction_);
  }

  if (has_roleid()) {
    // required int32 roleId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->roleid());
  }

  if (has_draging()) {
    // required bool draging = 2;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t GMAction_Move::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GMAction_Move)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .GMPoint3D direction = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *direction_);

    // required int32 roleId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->roleid());

    // required bool draging = 2;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMAction_Move::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GMAction_Move)
  GOOGLE_DCHECK_NE(&from, this);
  const GMAction_Move* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GMAction_Move>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GMAction_Move)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GMAction_Move)
    MergeFrom(*source);
  }
}

void GMAction_Move::MergeFrom(const GMAction_Move& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GMAction_Move)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_direction()->::GMPoint3D::MergeFrom(from.direction());
    }
    if (cached_has_bits & 0x00000002u) {
      roleid_ = from.roleid_;
    }
    if (cached_has_bits & 0x00000004u) {
      draging_ = from.draging_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GMAction_Move::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GMAction_Move)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMAction_Move::CopyFrom(const GMAction_Move& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GMAction_Move)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMAction_Move::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void GMAction_Move::Swap(GMAction_Move* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GMAction_Move::InternalSwap(GMAction_Move* other) {
  using std::swap;
  swap(direction_, other->direction_);
  swap(roleid_, other->roleid_);
  swap(draging_, other->draging_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GMAction_Move::GetMetadata() const {
  protobuf_action_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_action_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GMAction_MoveToPoint::InitAsDefaultInstance() {
  ::_GMAction_MoveToPoint_default_instance_._instance.get_mutable()->position_ = const_cast< ::GMPoint3D*>(
      ::GMPoint3D::internal_default_instance());
}
void GMAction_MoveToPoint::clear_position() {
  if (position_ != NULL) position_->Clear();
  clear_has_position();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GMAction_MoveToPoint::kRoleIdFieldNumber;
const int GMAction_MoveToPoint::kPositionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GMAction_MoveToPoint::GMAction_MoveToPoint()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_action_2eproto::InitDefaultsGMAction_MoveToPoint();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:GMAction_MoveToPoint)
}
GMAction_MoveToPoint::GMAction_MoveToPoint(const GMAction_MoveToPoint& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_position()) {
    position_ = new ::GMPoint3D(*from.position_);
  } else {
    position_ = NULL;
  }
  roleid_ = from.roleid_;
  // @@protoc_insertion_point(copy_constructor:GMAction_MoveToPoint)
}

void GMAction_MoveToPoint::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&roleid_) -
      reinterpret_cast<char*>(&position_)) + sizeof(roleid_));
}

GMAction_MoveToPoint::~GMAction_MoveToPoint() {
  // @@protoc_insertion_point(destructor:GMAction_MoveToPoint)
  SharedDtor();
}

void GMAction_MoveToPoint::SharedDtor() {
  if (this != internal_default_instance()) delete position_;
}

void GMAction_MoveToPoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMAction_MoveToPoint::descriptor() {
  ::protobuf_action_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_action_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GMAction_MoveToPoint& GMAction_MoveToPoint::default_instance() {
  ::protobuf_action_2eproto::InitDefaultsGMAction_MoveToPoint();
  return *internal_default_instance();
}


void GMAction_MoveToPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:GMAction_MoveToPoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(position_ != NULL);
    position_->Clear();
  }
  roleid_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GMAction_MoveToPoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GMAction_MoveToPoint)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 roleId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_roleid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roleid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .GMPoint3D position = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_position()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GMAction_MoveToPoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GMAction_MoveToPoint)
  return false;
#undef DO_
}

void GMAction_MoveToPoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GMAction_MoveToPoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 roleId = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->roleid(), output);
  }

  // required .GMPoint3D position = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *position_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GMAction_MoveToPoint)
}

::google::protobuf::uint8* GMAction_MoveToPoint::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GMAction_MoveToPoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 roleId = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roleid(), target);
  }

  // required .GMPoint3D position = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *position_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GMAction_MoveToPoint)
  return target;
}

size_t GMAction_MoveToPoint::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:GMAction_MoveToPoint)
  size_t total_size = 0;

  if (has_position()) {
    // required .GMPoint3D position = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *position_);
  }

  if (has_roleid()) {
    // required int32 roleId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->roleid());
  }

  return total_size;
}
size_t GMAction_MoveToPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GMAction_MoveToPoint)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .GMPoint3D position = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *position_);

    // required int32 roleId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->roleid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMAction_MoveToPoint::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GMAction_MoveToPoint)
  GOOGLE_DCHECK_NE(&from, this);
  const GMAction_MoveToPoint* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GMAction_MoveToPoint>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GMAction_MoveToPoint)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GMAction_MoveToPoint)
    MergeFrom(*source);
  }
}

void GMAction_MoveToPoint::MergeFrom(const GMAction_MoveToPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GMAction_MoveToPoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_position()->::GMPoint3D::MergeFrom(from.position());
    }
    if (cached_has_bits & 0x00000002u) {
      roleid_ = from.roleid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GMAction_MoveToPoint::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GMAction_MoveToPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMAction_MoveToPoint::CopyFrom(const GMAction_MoveToPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GMAction_MoveToPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMAction_MoveToPoint::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void GMAction_MoveToPoint::Swap(GMAction_MoveToPoint* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GMAction_MoveToPoint::InternalSwap(GMAction_MoveToPoint* other) {
  using std::swap;
  swap(position_, other->position_);
  swap(roleid_, other->roleid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GMAction_MoveToPoint::GetMetadata() const {
  protobuf_action_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_action_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::GMAction_ReleaseSkill* Arena::Create< ::GMAction_ReleaseSkill >(Arena* arena) {
  return Arena::CreateInternal< ::GMAction_ReleaseSkill >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::GMAction_Move* Arena::Create< ::GMAction_Move >(Arena* arena) {
  return Arena::CreateInternal< ::GMAction_Move >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::GMAction_MoveToPoint* Arena::Create< ::GMAction_MoveToPoint >(Arena* arena) {
  return Arena::CreateInternal< ::GMAction_MoveToPoint >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
