// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: action.proto

#ifndef PROTOBUF_action_2eproto_INCLUDED
#define PROTOBUF_action_2eproto_INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "scene.pb.h"
// @@protoc_insertion_point(includes)

namespace protobuf_action_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[3];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsGMAction_ReleaseSkillImpl();
void InitDefaultsGMAction_ReleaseSkill();
void InitDefaultsGMAction_MoveImpl();
void InitDefaultsGMAction_Move();
void InitDefaultsGMAction_MoveToPointImpl();
void InitDefaultsGMAction_MoveToPoint();
inline void InitDefaults() {
  InitDefaultsGMAction_ReleaseSkill();
  InitDefaultsGMAction_Move();
  InitDefaultsGMAction_MoveToPoint();
}
}  // namespace protobuf_action_2eproto
class GMAction_Move;
class GMAction_MoveDefaultTypeInternal;
extern GMAction_MoveDefaultTypeInternal _GMAction_Move_default_instance_;
class GMAction_MoveToPoint;
class GMAction_MoveToPointDefaultTypeInternal;
extern GMAction_MoveToPointDefaultTypeInternal _GMAction_MoveToPoint_default_instance_;
class GMAction_ReleaseSkill;
class GMAction_ReleaseSkillDefaultTypeInternal;
extern GMAction_ReleaseSkillDefaultTypeInternal _GMAction_ReleaseSkill_default_instance_;
namespace google {
namespace protobuf {
template<> ::GMAction_Move* Arena::Create< ::GMAction_Move>(Arena*);
template<> ::GMAction_MoveToPoint* Arena::Create< ::GMAction_MoveToPoint>(Arena*);
template<> ::GMAction_ReleaseSkill* Arena::Create< ::GMAction_ReleaseSkill>(Arena*);
}  // namespace protobuf
}  // namespace google

enum GMActionType {
  MOVE = 1,
  RELEASE_SKILL = 2,
  MOVE_TO_POINT = 3
};
bool GMActionType_IsValid(int value);
const GMActionType GMActionType_MIN = MOVE;
const GMActionType GMActionType_MAX = MOVE_TO_POINT;
const int GMActionType_ARRAYSIZE = GMActionType_MAX + 1;

const ::google::protobuf::EnumDescriptor* GMActionType_descriptor();
inline const ::std::string& GMActionType_Name(GMActionType value) {
  return ::google::protobuf::internal::NameOfEnum(
    GMActionType_descriptor(), value);
}
inline bool GMActionType_Parse(
    const ::std::string& name, GMActionType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GMActionType>(
    GMActionType_descriptor(), name, value);
}
// ===================================================================

class GMAction_ReleaseSkill : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GMAction_ReleaseSkill) */ {
 public:
  GMAction_ReleaseSkill();
  virtual ~GMAction_ReleaseSkill();

  GMAction_ReleaseSkill(const GMAction_ReleaseSkill& from);

  inline GMAction_ReleaseSkill& operator=(const GMAction_ReleaseSkill& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GMAction_ReleaseSkill(GMAction_ReleaseSkill&& from) noexcept
    : GMAction_ReleaseSkill() {
    *this = ::std::move(from);
  }

  inline GMAction_ReleaseSkill& operator=(GMAction_ReleaseSkill&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GMAction_ReleaseSkill& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GMAction_ReleaseSkill* internal_default_instance() {
    return reinterpret_cast<const GMAction_ReleaseSkill*>(
               &_GMAction_ReleaseSkill_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(GMAction_ReleaseSkill* other);
  friend void swap(GMAction_ReleaseSkill& a, GMAction_ReleaseSkill& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GMAction_ReleaseSkill* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<GMAction_ReleaseSkill>(NULL);
  }

  GMAction_ReleaseSkill* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<GMAction_ReleaseSkill>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GMAction_ReleaseSkill& from);
  void MergeFrom(const GMAction_ReleaseSkill& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GMAction_ReleaseSkill* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .GMPoint3D mouseposition = 3;
  bool has_mouseposition() const;
  void clear_mouseposition();
  static const int kMousepositionFieldNumber = 3;
  const ::GMPoint3D& mouseposition() const;
  ::GMPoint3D* release_mouseposition();
  ::GMPoint3D* mutable_mouseposition();
  void set_allocated_mouseposition(::GMPoint3D* mouseposition);

  // required int32 roleId = 1;
  bool has_roleid() const;
  void clear_roleid();
  static const int kRoleIdFieldNumber = 1;
  ::google::protobuf::int32 roleid() const;
  void set_roleid(::google::protobuf::int32 value);

  // required int32 skillId = 2;
  bool has_skillid() const;
  void clear_skillid();
  static const int kSkillIdFieldNumber = 2;
  ::google::protobuf::int32 skillid() const;
  void set_skillid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GMAction_ReleaseSkill)
 private:
  void set_has_roleid();
  void clear_has_roleid();
  void set_has_skillid();
  void clear_has_skillid();
  void set_has_mouseposition();
  void clear_has_mouseposition();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::GMPoint3D* mouseposition_;
  ::google::protobuf::int32 roleid_;
  ::google::protobuf::int32 skillid_;
  friend struct ::protobuf_action_2eproto::TableStruct;
  friend void ::protobuf_action_2eproto::InitDefaultsGMAction_ReleaseSkillImpl();
};
// -------------------------------------------------------------------

class GMAction_Move : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GMAction_Move) */ {
 public:
  GMAction_Move();
  virtual ~GMAction_Move();

  GMAction_Move(const GMAction_Move& from);

  inline GMAction_Move& operator=(const GMAction_Move& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GMAction_Move(GMAction_Move&& from) noexcept
    : GMAction_Move() {
    *this = ::std::move(from);
  }

  inline GMAction_Move& operator=(GMAction_Move&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GMAction_Move& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GMAction_Move* internal_default_instance() {
    return reinterpret_cast<const GMAction_Move*>(
               &_GMAction_Move_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(GMAction_Move* other);
  friend void swap(GMAction_Move& a, GMAction_Move& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GMAction_Move* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<GMAction_Move>(NULL);
  }

  GMAction_Move* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<GMAction_Move>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GMAction_Move& from);
  void MergeFrom(const GMAction_Move& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GMAction_Move* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .GMPoint3D direction = 3;
  bool has_direction() const;
  void clear_direction();
  static const int kDirectionFieldNumber = 3;
  const ::GMPoint3D& direction() const;
  ::GMPoint3D* release_direction();
  ::GMPoint3D* mutable_direction();
  void set_allocated_direction(::GMPoint3D* direction);

  // required int32 roleId = 1;
  bool has_roleid() const;
  void clear_roleid();
  static const int kRoleIdFieldNumber = 1;
  ::google::protobuf::int32 roleid() const;
  void set_roleid(::google::protobuf::int32 value);

  // required bool draging = 2;
  bool has_draging() const;
  void clear_draging();
  static const int kDragingFieldNumber = 2;
  bool draging() const;
  void set_draging(bool value);

  // @@protoc_insertion_point(class_scope:GMAction_Move)
 private:
  void set_has_roleid();
  void clear_has_roleid();
  void set_has_draging();
  void clear_has_draging();
  void set_has_direction();
  void clear_has_direction();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::GMPoint3D* direction_;
  ::google::protobuf::int32 roleid_;
  bool draging_;
  friend struct ::protobuf_action_2eproto::TableStruct;
  friend void ::protobuf_action_2eproto::InitDefaultsGMAction_MoveImpl();
};
// -------------------------------------------------------------------

class GMAction_MoveToPoint : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GMAction_MoveToPoint) */ {
 public:
  GMAction_MoveToPoint();
  virtual ~GMAction_MoveToPoint();

  GMAction_MoveToPoint(const GMAction_MoveToPoint& from);

  inline GMAction_MoveToPoint& operator=(const GMAction_MoveToPoint& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GMAction_MoveToPoint(GMAction_MoveToPoint&& from) noexcept
    : GMAction_MoveToPoint() {
    *this = ::std::move(from);
  }

  inline GMAction_MoveToPoint& operator=(GMAction_MoveToPoint&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GMAction_MoveToPoint& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GMAction_MoveToPoint* internal_default_instance() {
    return reinterpret_cast<const GMAction_MoveToPoint*>(
               &_GMAction_MoveToPoint_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(GMAction_MoveToPoint* other);
  friend void swap(GMAction_MoveToPoint& a, GMAction_MoveToPoint& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GMAction_MoveToPoint* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<GMAction_MoveToPoint>(NULL);
  }

  GMAction_MoveToPoint* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<GMAction_MoveToPoint>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GMAction_MoveToPoint& from);
  void MergeFrom(const GMAction_MoveToPoint& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GMAction_MoveToPoint* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .GMPoint3D position = 2;
  bool has_position() const;
  void clear_position();
  static const int kPositionFieldNumber = 2;
  const ::GMPoint3D& position() const;
  ::GMPoint3D* release_position();
  ::GMPoint3D* mutable_position();
  void set_allocated_position(::GMPoint3D* position);

  // required int32 roleId = 1;
  bool has_roleid() const;
  void clear_roleid();
  static const int kRoleIdFieldNumber = 1;
  ::google::protobuf::int32 roleid() const;
  void set_roleid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GMAction_MoveToPoint)
 private:
  void set_has_roleid();
  void clear_has_roleid();
  void set_has_position();
  void clear_has_position();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::GMPoint3D* position_;
  ::google::protobuf::int32 roleid_;
  friend struct ::protobuf_action_2eproto::TableStruct;
  friend void ::protobuf_action_2eproto::InitDefaultsGMAction_MoveToPointImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GMAction_ReleaseSkill

// required int32 roleId = 1;
inline bool GMAction_ReleaseSkill::has_roleid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GMAction_ReleaseSkill::set_has_roleid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GMAction_ReleaseSkill::clear_has_roleid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GMAction_ReleaseSkill::clear_roleid() {
  roleid_ = 0;
  clear_has_roleid();
}
inline ::google::protobuf::int32 GMAction_ReleaseSkill::roleid() const {
  // @@protoc_insertion_point(field_get:GMAction_ReleaseSkill.roleId)
  return roleid_;
}
inline void GMAction_ReleaseSkill::set_roleid(::google::protobuf::int32 value) {
  set_has_roleid();
  roleid_ = value;
  // @@protoc_insertion_point(field_set:GMAction_ReleaseSkill.roleId)
}

// required int32 skillId = 2;
inline bool GMAction_ReleaseSkill::has_skillid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GMAction_ReleaseSkill::set_has_skillid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GMAction_ReleaseSkill::clear_has_skillid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GMAction_ReleaseSkill::clear_skillid() {
  skillid_ = 0;
  clear_has_skillid();
}
inline ::google::protobuf::int32 GMAction_ReleaseSkill::skillid() const {
  // @@protoc_insertion_point(field_get:GMAction_ReleaseSkill.skillId)
  return skillid_;
}
inline void GMAction_ReleaseSkill::set_skillid(::google::protobuf::int32 value) {
  set_has_skillid();
  skillid_ = value;
  // @@protoc_insertion_point(field_set:GMAction_ReleaseSkill.skillId)
}

// required .GMPoint3D mouseposition = 3;
inline bool GMAction_ReleaseSkill::has_mouseposition() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GMAction_ReleaseSkill::set_has_mouseposition() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GMAction_ReleaseSkill::clear_has_mouseposition() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::GMPoint3D& GMAction_ReleaseSkill::mouseposition() const {
  const ::GMPoint3D* p = mouseposition_;
  // @@protoc_insertion_point(field_get:GMAction_ReleaseSkill.mouseposition)
  return p != NULL ? *p : *reinterpret_cast<const ::GMPoint3D*>(
      &::_GMPoint3D_default_instance_);
}
inline ::GMPoint3D* GMAction_ReleaseSkill::release_mouseposition() {
  // @@protoc_insertion_point(field_release:GMAction_ReleaseSkill.mouseposition)
  clear_has_mouseposition();
  ::GMPoint3D* temp = mouseposition_;
  mouseposition_ = NULL;
  return temp;
}
inline ::GMPoint3D* GMAction_ReleaseSkill::mutable_mouseposition() {
  set_has_mouseposition();
  if (mouseposition_ == NULL) {
    mouseposition_ = ::google::protobuf::Arena::Create< ::GMPoint3D >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:GMAction_ReleaseSkill.mouseposition)
  return mouseposition_;
}
inline void GMAction_ReleaseSkill::set_allocated_mouseposition(::GMPoint3D* mouseposition) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(mouseposition_);
  }
  if (mouseposition) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      mouseposition = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, mouseposition, submessage_arena);
    }
    set_has_mouseposition();
  } else {
    clear_has_mouseposition();
  }
  mouseposition_ = mouseposition;
  // @@protoc_insertion_point(field_set_allocated:GMAction_ReleaseSkill.mouseposition)
}

// -------------------------------------------------------------------

// GMAction_Move

// required int32 roleId = 1;
inline bool GMAction_Move::has_roleid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GMAction_Move::set_has_roleid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GMAction_Move::clear_has_roleid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GMAction_Move::clear_roleid() {
  roleid_ = 0;
  clear_has_roleid();
}
inline ::google::protobuf::int32 GMAction_Move::roleid() const {
  // @@protoc_insertion_point(field_get:GMAction_Move.roleId)
  return roleid_;
}
inline void GMAction_Move::set_roleid(::google::protobuf::int32 value) {
  set_has_roleid();
  roleid_ = value;
  // @@protoc_insertion_point(field_set:GMAction_Move.roleId)
}

// required bool draging = 2;
inline bool GMAction_Move::has_draging() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GMAction_Move::set_has_draging() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GMAction_Move::clear_has_draging() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GMAction_Move::clear_draging() {
  draging_ = false;
  clear_has_draging();
}
inline bool GMAction_Move::draging() const {
  // @@protoc_insertion_point(field_get:GMAction_Move.draging)
  return draging_;
}
inline void GMAction_Move::set_draging(bool value) {
  set_has_draging();
  draging_ = value;
  // @@protoc_insertion_point(field_set:GMAction_Move.draging)
}

// required .GMPoint3D direction = 3;
inline bool GMAction_Move::has_direction() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GMAction_Move::set_has_direction() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GMAction_Move::clear_has_direction() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::GMPoint3D& GMAction_Move::direction() const {
  const ::GMPoint3D* p = direction_;
  // @@protoc_insertion_point(field_get:GMAction_Move.direction)
  return p != NULL ? *p : *reinterpret_cast<const ::GMPoint3D*>(
      &::_GMPoint3D_default_instance_);
}
inline ::GMPoint3D* GMAction_Move::release_direction() {
  // @@protoc_insertion_point(field_release:GMAction_Move.direction)
  clear_has_direction();
  ::GMPoint3D* temp = direction_;
  direction_ = NULL;
  return temp;
}
inline ::GMPoint3D* GMAction_Move::mutable_direction() {
  set_has_direction();
  if (direction_ == NULL) {
    direction_ = ::google::protobuf::Arena::Create< ::GMPoint3D >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:GMAction_Move.direction)
  return direction_;
}
inline void GMAction_Move::set_allocated_direction(::GMPoint3D* direction) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(direction_);
  }
  if (direction) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      direction = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, direction, submessage_arena);
    }
    set_has_direction();
  } else {
    clear_has_direction();
  }
  direction_ = direction;
  // @@protoc_insertion_point(field_set_allocated:GMAction_Move.direction)
}

// -------------------------------------------------------------------

// GMAction_MoveToPoint

// required int32 roleId = 1;
inline bool GMAction_MoveToPoint::has_roleid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GMAction_MoveToPoint::set_has_roleid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GMAction_MoveToPoint::clear_has_roleid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GMAction_MoveToPoint::clear_roleid() {
  roleid_ = 0;
  clear_has_roleid();
}
inline ::google::protobuf::int32 GMAction_MoveToPoint::roleid() const {
  // @@protoc_insertion_point(field_get:GMAction_MoveToPoint.roleId)
  return roleid_;
}
inline void GMAction_MoveToPoint::set_roleid(::google::protobuf::int32 value) {
  set_has_roleid();
  roleid_ = value;
  // @@protoc_insertion_point(field_set:GMAction_MoveToPoint.roleId)
}

// required .GMPoint3D position = 2;
inline bool GMAction_MoveToPoint::has_position() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GMAction_MoveToPoint::set_has_position() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GMAction_MoveToPoint::clear_has_position() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::GMPoint3D& GMAction_MoveToPoint::position() const {
  const ::GMPoint3D* p = position_;
  // @@protoc_insertion_point(field_get:GMAction_MoveToPoint.position)
  return p != NULL ? *p : *reinterpret_cast<const ::GMPoint3D*>(
      &::_GMPoint3D_default_instance_);
}
inline ::GMPoint3D* GMAction_MoveToPoint::release_position() {
  // @@protoc_insertion_point(field_release:GMAction_MoveToPoint.position)
  clear_has_position();
  ::GMPoint3D* temp = position_;
  position_ = NULL;
  return temp;
}
inline ::GMPoint3D* GMAction_MoveToPoint::mutable_position() {
  set_has_position();
  if (position_ == NULL) {
    position_ = ::google::protobuf::Arena::Create< ::GMPoint3D >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:GMAction_MoveToPoint.position)
  return position_;
}
inline void GMAction_MoveToPoint::set_allocated_position(::GMPoint3D* position) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(position_);
  }
  if (position) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      position = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    set_has_position();
  } else {
    clear_has_position();
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:GMAction_MoveToPoint.position)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::GMActionType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GMActionType>() {
  return ::GMActionType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_action_2eproto_INCLUDED
